Elm.Stamps = Elm.Stamps || {};
Elm.Stamps.make = function (_elm) {
   "use strict";
   _elm.Stamps = _elm.Stamps || {};
   if (_elm.Stamps.values) return _elm.Stamps.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Mouse = Elm.Mouse.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Window = Elm.Window.make(_elm);
   var _op = {};
   var scene = F2(function (_p0,locs) {
      var _p1 = _p0;
      var _p6 = _p1._0;
      var _p5 = _p1._1;
      var drawPentagon = function (_p2) {
         var _p3 = _p2;
         var _p4 = _p3._0;
         return A2($Graphics$Collage.rotate,
         $Basics.toFloat(_p4),
         A2($Graphics$Collage.move,
         {ctor: "_Tuple2",_0: $Basics.toFloat(_p4) - $Basics.toFloat(_p6) / 2,_1: $Basics.toFloat(_p5) / 2 - $Basics.toFloat(_p3._1)},
         A2($Graphics$Collage.filled,A4($Color.hsla,$Basics.toFloat(_p4),1,0.5,0.7),A2($Graphics$Collage.ngon,5,20))));
      };
      return $Graphics$Element.layers(_U.list([A3($Graphics$Collage.collage,_p6,_p5,A2($List.map,drawPentagon,locs))
                                              ,$Graphics$Element.show("Click to stamp a pentagon.")]));
   });
   var reset = Elm.Native.Port.make(_elm).inboundSignal("reset",
   "()",
   function (v) {
      return typeof v === "object" && v instanceof Array ? {ctor: "_Tuple0"} : _U.badPort("an array",v);
   });
   var events = A2($Signal.merge,
   A2($Signal.map,$Maybe.Just,A2($Signal.sampleOn,$Mouse.clicks,$Mouse.position)),
   A2($Signal.map,$Basics.always($Maybe.Nothing),reset));
   var clickLocations = function () {
      var update = F2(function (event,locations) {
         var _p7 = event;
         if (_p7.ctor === "Just") {
               return A2($List._op["::"],_p7._0,locations);
            } else {
               return _U.list([]);
            }
      });
      return A3($Signal.foldp,update,_U.list([]),events);
   }();
   var main = A3($Signal.map2,scene,$Window.dimensions,clickLocations);
   var count = Elm.Native.Port.make(_elm).outboundSignal("count",function (v) {    return v;},A2($Signal.map,$List.length,clickLocations));
   return _elm.Stamps.values = {_op: _op,events: events,clickLocations: clickLocations,scene: scene,main: main};
};